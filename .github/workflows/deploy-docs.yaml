name: megafon-ui CI deploy

on:
  release:
    types: [published]
  push:
    branches:
      - ci-test2

jobs:
  main:
    if: github.repository_owner == 'jekatigr'

    runs-on: ubuntu-latest

    steps:
      - name: Cancel previous runs
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.PAT_TOKEN}}
          script: |
            try {
              // Get a list of deploy docs workflow runs
              const result = await github.request('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs', {
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                workflow_id: 'deploy-docs.yaml',
                // event: 'release'
              })

              const currentRun = result.data.workflow_runs.find((r) => r.id === context.runId);

              if (!currentRun) {
                return; //
              }

              for (const workflowRun of result.data.workflow_runs) {
                const notThis = workflowRun.id !== currentRun.id;
                const notCompleted = workflowRun.status !== 'completed';
                const createdBeforeCurrent = new Date(currentRun.created_at) > new Date(workflowRun.created_at);

                if (notThis && notCompleted && createdBeforeCurrent) {
                  console.log('cancel this run: ', workflowRun);
                }
              }
            } catch (ex) {
              console.log('Exception while cancelling other workflow runs: ', ex);
            }

#            const creator = context.payload.sender.login
#            const opts = github.issues.listForRepo.endpoint.merge({
#              ...context.issue,
#              creator,
#              state: 'all'
#            })
#            const issues = await github.paginate(opts)
#
#            for (const issue of issues) {
#              if (issue.number === context.issue.number) {
#                continue
#              }
#
#              if (issue.pull_request) {
#                return // Creator is already a contributor.
#              }
#            }
#
#            await github.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: 'Welcome, new contributor!'
#            })

      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Yarn cache
        uses: actions/cache@v2
        id: cache-yarn-ci
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-


      - name: Local Node.js modules cache
        id: cache-node-modules-ci
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build documentation
        run: yarn demo:build
#
#      - name: Deploy documentation
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./docs
